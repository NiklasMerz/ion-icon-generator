#! /usr/bin/env node

'strict mode'

require('colors')

const fontGenerator = require('../lib/index')
const errors = require('../lib/errors')
const minimist = require('minimist')
const glob = require('glob')

/*
 * Initialise script and options
 */
function init() {
  const args = minimist(process.argv.slice(2))
  const types = (args.types || 'svg,ttf,woff,woff2,eot')
  .split(',')
  .map(ext => ext.trim())
  const options = {
    paths              : getPaths(args._),
    outputDir          : args.o || args.out,
    fontName           : args.n || args.name,
    fontsPath          : args.f || args.fontspath,
    types              : types,
    css                : args.c || args.css,
    cssPath            : args.csspath,
    cssTemplate        : args.csstp,
    json               : args.j || args.json,
    jsonPath           : args.jsonpath,
    html               : args.html,
    htmlPath           : args.htmlpath,
    htmlTemplate       : args.htmltp,
    silent             : args.s || args.silent || false,
    classPrefix        : args.p || args.prefix,
    baseTag            : args.t || args.tag,
    normalize          : args.normalize,
    round              : args.round,
    descent            : args.descent,
    fixedWidth         : args.mono,
    fontHeight         : args.height,
    centerHorizontally : args.center
  }
  const calledEmpty = Object.keys(args).length === 1 && args._.length === 0
  const formats = [ 'json' ]

  // Parse Boolean values that default to true
  formats.forEach(key => {
    if (typeof options[key] !== 'undefined') {
      options[key] = options[key] === 'true'
    }
  })

  // Show usage if missing any arguments or called with -h / --help
  if (args.h || args.help || calledEmpty) {
    showHelp()
    return process.exit()
  }

  run(options)
}

/*
 * Run icon font kit creation
 *
 * @param {Object} options
 */
function run(options) {
  fontGenerator.generate(options, err => err ? fail(err) : null)
}

/*
 * Fail - Interrut process and log validation errors or throw unhandled exceptions
 *
 * @param {Error|ValidationError} err
 */
function fail(err) {
  if (typeof err === 'string' || err instanceof errors.ValidationError) {
    console.error(err.message.red)
    process.exit()
  }

  if (err instanceof Error) { throw err }
}

/*
 * Display usage
 */
function showHelp() {
  console.log(
    'Usage   :'.bold + ' icon-font-generator [ svg-icons-glob ] -o [ output-dir ] [ options ]\n' +
    'Example :'.bold + ' icon-font-generator src/*.svg -o dist\n\n' +

    'Options:\n'.bold +
    '  -o, --out        '.bold + 'Output icon font set files to <out> directory\n'.italic
  )
}

/*
 * Resolve globs
 *
 * @param {String} globs
 * @return {[String]}
 */
function getPaths(globs) {
  var out = []

  globs.forEach(str => out = out.concat(glob.sync(str)))

  return out
}

init()
